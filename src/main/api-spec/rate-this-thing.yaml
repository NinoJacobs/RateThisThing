openapi: 3.0.0
info:
  title: Rate This Thing API
  version: 1.0.0
  description: API documentation for the "Rate This Thing" application.

paths:
  # START OF USERS CONTROLLER
  /users:
    get:
      summary: Retrieve a list of users
      operationId: getUsers
      tags:
        - User
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO' # Reference the User schema

  /users/{username}:
    get:
      summary: Retrieve a user by username
      operationId: getUserByUsername
      tags:
        - User
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '404':
          description: User not found

  /users/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
        '400':
          description: Invalid input data
        '409':
          description: User already exists

  # END OF USERS CONTROLLER

  # START OF CATEGORIES CONTROLLER
  /categories:
    get:
      summary: Retrieve a list of categories
      operationId: getCategories
      tags:
        - Category
      responses:
        '200':
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDTO' # Reference the Category schema
  # END OF CATEGORIES CONTROLLER

  # START OF ITEMS CONTROLLER
  /items:
    get:
      summary: Retrieve all items
      operationId: getItems
      tags:
        - Item
      responses:
        '200':
          description: An Item object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemDTO'
        '404':
          description: Item not found

  /items/{itemId}:
    get:
      summary: Retrieve an item by its Id
      operationId: getItemById
      tags:
        - Item
      parameters:
        - name: itemId
          in: path
          required: true
          description: The Id of the item
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: An Item object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDTO'
        '404':
          description: Item not found

  # END OF ITEMS CONTROLLER

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01
        profileImage:
          type: string
          example: http://example.com/profile.jpg
        bio:
          type: string
          example: This is a user bio.
    UserCreated:
      type: object
      properties:
        message:
          type: string
          example: "User registered successfully."
        userId:
          type: integer
          format: int64
          example: 1

    CategoryDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          enum:
            - MOVIES
            - BOOKS
            - OTHER
          example: MOVIES

    ItemDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        categoryName:
          type: string
